# tasks.py
from celery import shared_task
from .models import Training
from .models import User, Role
from .helpers import send_push_notification  # uprav podƒæa tvojej ≈°trukt√∫ry
from .models import ExpoPushToken  # uprav podƒæa tvojej ≈°trukt√∫ry
import logging

logger = logging.getLogger(__name__)

@shared_task
def send_training_notifications(training_id):
    try:
        training = Training.objects.get(id=training_id)
    except Training.DoesNotExist:
        logger.warning(f"Tr√©ning s ID {training_id} neexistuje")
        return

    players = User.objects.filter(
        roles__category=training.category,
        roles__role=Role.PLAYER
    ).distinct()

    for player in players:
        tokens = ExpoPushToken.objects.filter(user=player).values_list("token", flat=True)
        for token in tokens:
            try:
                send_push_notification(
                    token,
                    "Nov√Ω Tr√©ning",
                    f"{training.description} - {training.date.strftime('%d.%m.%Y')} v {training.location}",
                    user_id=0,
                    user_name="tr√©ning"
                )
                logger.info(f"Push pre {player.username} ‚Üí {token}")
            except Exception as e:
                logger.warning(f"Chyba pri push pre {player.username} ‚Üí {token}: {str(e)}")


@shared_task
def notify_training_deleted(training_id, training_description, category_id):
    from .models import User, Role, ExpoPushToken, Category

    try:
        category = Category.objects.get(id=category_id)
        players = User.objects.filter(
            roles__category=category,
            roles__role=Role.PLAYER
        ).distinct()

        for player in players:
            tokens = ExpoPushToken.objects.filter(user=player).values_list("token", flat=True)
            for token in tokens:
                try:
                    send_push_notification(
                        token,
                        "Zru≈°en√Ω tr√©ning",
                        f"Tr√©ning '{training_description}' bol zru≈°en√Ω.",
                        user_id=0,
                        user_name="tr√©ning"
                    )
                except Exception as e:
                    logger.warning(f"Chyba pri push pre {player.username} ‚Üí {token}: {str(e)}")
    except Exception as e:
        logger.error(f"‚ùå Chyba pri notifikovan√≠ o zmazan√≠ tr√©ningu: {str(e)}")

@shared_task
def send_match_notifications(match_id):
    from .models import Match
    match = Match.objects.get(id=match_id)

    players = User.objects.filter(
        roles__category=match.category,
        roles__role=Role.PLAYER
    ).distinct()

    for player in players:
        send_push_notification(player, f"Nov√Ω z√°pas: {match.opponent}", f"{match.location} ")


@shared_task
def send_training_updated_notification(training_id):
    try:
        training = Training.objects.get(id=training_id)
    except Training.DoesNotExist:
        logger.warning(f"Tr√©ning s ID {training_id} neexistuje")
        return

    players = User.objects.filter(
        roles__category=training.category,
        roles__role=Role.PLAYER
    ).distinct()

    for player in players:
        tokens = ExpoPushToken.objects.filter(user=player).values_list("token", flat=True)
        for token in tokens:
            try:
                send_push_notification(
                    token,
                    "Zmena tr√©ningu!",
                    f"{training.description} - {training.date.strftime('%d.%m.%Y')} v {training.location}",
                    user_id=0,
                    user_name="tr√©ning"
                )
                logger.info(f"Notifik√°cia o zmene tr√©ningu pre {player.username} ‚Üí {token}")
            except Exception as e:
                logger.warning(f"Chyba pri notifik√°cii pre {player.username} ‚Üí {token}: {str(e)}")


# dochadzka_app/tasks.py
from celery import shared_task
from .models import Match, MatchNomination, ExpoPushToken, User
from .helpers import send_push_notification
from django.utils.timezone import localtime

def get_tokens(users):
    return ExpoPushToken.objects.filter(user__in=users).values_list("token", flat=True)

from celery import shared_task
from django.utils.timezone import localtime
from .models import Match, User

@shared_task(bind=True, max_retries=3, default_retry_delay=2)
def notify_match_created(self, match_id):
    try:
        match = Match.objects.get(id=match_id)
        users = User.objects.filter(
            roles__category=match.category,
            roles__role='player',
            club=match.club
        ).distinct()
        tokens = get_tokens(users)

        date_str = localtime(match.date).strftime("%d.%m.%Y")
        for token in tokens:
            send_push_notification(
                token,
                title="Nov√Ω z√°pas",
                message=f"Proti {match.opponent} ‚Äì {date_str} ‚Äì {match.location}",
                data={"type": "match", "match_id": match.id}
            )
    except Match.DoesNotExist as e:
        print(f"‚ùå Z√°pas {match_id} zatiaƒæ neexistuje, retry...")
        raise self.retry(exc=e)
    except Exception as e:
        print(f"‚ùå notify_match_created: {e}")
@shared_task
def notify_match_updated(match_id):
    try:
        match = Match.objects.get(id=match_id)

        # üîÅ V≈°etci hr√°ƒçi s rolou 'player' v danej kateg√≥rii a klube
        users = User.objects.filter(
            roles__category=match.category,
            roles__role='player',
            club=match.club
        ).distinct()

        tokens = get_tokens(users)

        for token in tokens:
            send_push_notification(
                token,
                title="Zmena v z√°pase!",
                message=f"Boli zmenen√© √∫daje z√°pasu proti {match.opponent}, skontroluj ich!",
                data = {"type": "match", "match_id": match.id}
            )

    except Exception as e:
        print(f"‚ùå notify_match_updated: {e}")

@shared_task
def notify_match_deleted(opponent, category_id, club_id):
    try:
        users = User.objects.filter(
            roles__category_id=category_id,
            roles__role='player',
            club_id=club_id
        ).distinct()

        tokens = get_tokens(users)

        for token in tokens:
            send_push_notification(
                token,
                title="Z√°pas zru≈°en√Ω",
                message=f"Z√°pas proti {opponent} bol zru≈°en√Ω."
            )
    except Exception as e:
        print(f"‚ùå notify_match_deleted: {e}")
@shared_task
def notify_nomination_changed(match_id, user_ids):
    try:
        match = Match.objects.get(id=match_id)
        nominations = MatchNomination.objects.filter(match=match, user__id__in=user_ids).select_related('user')

        for nomination in nominations:
            token_list = get_tokens([nomination.user])
            role = "v z√°klade" if not nomination.is_substitute else "ako n√°hradn√≠k"
            message = f"Bol si nominovan√Ω na z√°pas proti {match.opponent} {role}."

            for token in token_list:
                send_push_notification(
                    token,
                    title="Nomin√°cia",
                    message=message,
                    data = {"type": "match", "match_id": match.id}
                )
    except Exception as e:
        print(f"‚ùå notify_nomination_changed: {e}")

@shared_task
def notify_nomination_removed(match_id, user_ids):
    try:
        match = Match.objects.get(id=match_id)
        users = User.objects.filter(id__in=user_ids)
        tokens = get_tokens(users)

        for token in tokens:
            send_push_notification(
                token,
                title="Zmena v nomin√°cii",
                message=f"Bol si odstr√°nen√Ω z nomin√°cie na z√°pas proti {match.opponent}.",
                data = {"type": "match", "match_id": match.id}
            )
    except Exception as e:
        print(f"‚ùå notify_nomination_removed: {e}")

@shared_task
def remind_unknown_players(training_id, user_ids):
    try:
        training = Training.objects.get(id=training_id)
        users = User.objects.filter(id__in=user_ids)

        for user in users:
            tokens = ExpoPushToken.objects.filter(user=user).values_list("token", flat=True)
            for token in tokens:
                send_push_notification(
                    token,
                    title="Nezabudni hlasova≈•!",
                    message=f"St√°le si nepotvrdil √∫ƒças≈• na udalosti {training.description} ({training.date.strftime('%d.%m.%Y')})!",
                    data={"type": "training", "training_id": training.id}
                )
                logger.info(f"Pripomenutie posl. hr√°ƒçovi {user.username} ‚Üí {token}")

    except Exception as e:
        logger.error(f"‚ùå Chyba pri pripomenut√≠ neodpovedan√Ωm: {e}")


@shared_task
def notify_match_reminder(match_id, user_ids):
    try:
        match = Match.objects.get(id=match_id)
        users = User.objects.filter(id__in=user_ids)

        for user in users:
            tokens = ExpoPushToken.objects.filter(user=user).values_list("token", flat=True)
            for token in tokens:
                send_push_notification(
                    token=token,
                    title="Potvrƒè √∫ƒças≈• na z√°pase",
                    message=f"Z√°pas proti {match.opponent} ‚Äì {match.date.strftime('%d.%m.%Y')}. Nezabudni odpoveda≈•.",
                    data={
                        "type": "match",
                        "match_id": match.id
                    }
                )
                logger.info(f"üì® Reminder na z√°pas poslan√Ω hr√°ƒçovi {user.username} ‚Üí {token}")
    except Match.DoesNotExist:
        logger.warning(f"‚ùå notify_match_reminder: Match {match_id} not found")
    except Exception as e:
        logger.error(f"‚ùå Chyba pri pripomenut√≠ na z√°pas: {e}")


@shared_task
def notify_created_member_payment(user_id, amount, due_date):
    try:
        user = User.objects.get(id=user_id)
        tokens = ExpoPushToken.objects.filter(user=user).values_list("token", flat=True)

        for token in tokens:
            send_push_notification(
                token=token,
                title="Nov√° platba",
                message=f"Bola ti vytvoren√° nov√° platba vo v√Ω≈°ke {amount}‚Ç¨ so splatnos≈•ou do {due_date}.",
                data={"type": "payment"}
            )
            logger.info(f"Notifik√°cia o novej platbe ‚Üí {user.username} ({token})")
    except Exception as e:
        logger.error(f"Chyba pri notifik√°cii novej platby: {e}")


@shared_task
def notify_payment_status(user_id, is_paid, amount=None, vs=None):
    try:
        user = User.objects.get(id=user_id)
        tokens = ExpoPushToken.objects.filter(user=user).values_list("token", flat=True)

        if is_paid:
            title = "Platba prijat√°"
            message = f"Platba vo v√Ω≈°ke {amount}‚Ç¨ s VS {vs} bola √∫spe≈°ne prijat√°. ƒéakujeme!"
        else:
            title = "Platba ch√Ωba"
            message = "Tvoja platba zatiaƒæ nebola zaznamenan√°. Skontroluj pros√≠m svoje prevody."

        for token in tokens:
            send_push_notification(
                token=token,
                title=title,
                message=message,
                data={"type": "payment"}
            )
            logger.info(f"Notifik√°cia platby ({'OK' if is_paid else 'CH√ùBA'}) ‚Üí {user.username} ({token})")

    except Exception as e:
        logger.error(f"Chyba pri posielan√≠ stavu platby: {e}")

@shared_task
def notify_payment_assigned(user_id: int, amount: str, vs: str,):
    """
    Notifik√°cia, ≈æe pou≈æ√≠vateƒæovi bola pridelen√° nov√° platba..
    """
    try:
        user = User.objects.get(id=user_id)
        tokens = ExpoPushToken.objects.filter(user=user).values_list("token", flat=True)

        if not tokens:
            logger.warning(f"Pou≈æ√≠vateƒæ {user.username} nem√° expo tokeny ‚Üí notifik√°cia sa neposiela.")
            return

        title = "Nov√° platba"
        message = f"Bola ti vytvoren√° platba vo v√Ω≈°ke {amount} ‚Ç¨ (VS {vs})."

        for token in tokens:
            send_push_notification(
                token=token,
                title=title,
                message=message,
                data={"type": "payment_assigned", "amount": amount, "vs": vs,},
            )
            logger.info(f"Notifik√°cia pridelenia platby ‚Üí {user.username} ({token})")

    except Exception as e:
        logger.error(f"Chyba pri posielan√≠ notifik√°cie o pridelen√≠ platby: {e}")